package com.team.hrayr.videoplayer;

import android.content.Intent;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.widget.ImageButton;
import android.widget.SeekBar;
import android.widget.TextView;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class MainActivity extends AppCompatActivity {
    MediaPlayer mp;
    ImageButton play_pause,share;
    SeekBar seekBar;
    private Handler myHandler = new Handler();
    Runnable runnable;
    TextView timepos,timedur;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        timepos = findViewById(R.id.pos);
        timedur = findViewById(R.id.dur);
        seekBar = findViewById(R.id.seekBar);
        share = findViewById(R.id.share);
        share.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent sharingIntent = new Intent(Intent.ACTION_SEND);
                Uri videoUri = Uri.parse("/storage/emulated/0/DCIM/Camera/video.mp4");

                sharingIntent.setType("video/mp4");
                sharingIntent.putExtra(Intent.EXTRA_STREAM, videoUri);
                startActivity(Intent.createChooser(sharingIntent, "Share video using"));
            }
        });

        mp = MediaPlayer.create(this, R.raw.video);
        mp.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
            @Override
            public void onPrepared(MediaPlayer mediaPlayer) {
                seekBar.setMax(mp.getDuration());
                playCycle();
                mp.start();
            }
        });

        playCycle();
        mediaMonitor();

        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean b) {
                if (b) {
                    mp.seekTo(progress);
                }
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
            }
        });

        play_pause = findViewById(R.id.play_pause);
        play_pause.setImageResource(R.drawable.pause);
        play_pause.setBackgroundColor(Color.BLACK);
        play_pause.setOnClickListener(new View.OnClickListener() {
            boolean isPlaying = false;

            @Override
            public void onClick(View view) {
                if (isPlaying == false) {

                    play_pause.setImageResource(R.drawable.play);
                    mp.pause();
                    isPlaying = true;
                } else {
                    play_pause.setImageResource(R.drawable.pause);
                    mp.start();
                    isPlaying = false;
                }
            }
        });

        SurfaceView sv = (SurfaceView) findViewById(R.id.surfaceView1);
        SurfaceHolder holder = sv.getHolder();
        holder.addCallback(new SurfaceHolder.Callback() {
            @Override
            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
            }

            @Override
            public void surfaceCreated(SurfaceHolder holder) {
                mp.setDisplay(holder);
                mp.start();
            }

            @Override
            public void surfaceDestroyed(SurfaceHolder holder) {
            }
        });
    }

    private Runnable UpdateVideoTime = new Runnable() {
        public void run() {
            int mediaPosition = mp.getCurrentPosition();
            timepos.setText(String.format("%d min, %d sec ",
                    TimeUnit.MILLISECONDS.toMinutes((long)mediaPosition),
                    TimeUnit.MILLISECONDS.toSeconds((long)mediaPosition) -
                            TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.
                                    toMinutes((long) mediaPosition)))
            );
            seekBar.setProgress((int)mediaPosition);
            myHandler.postDelayed(this, 100);
        }
    };

    public void playCycle()
    {
        seekBar.setProgress(mp.getCurrentPosition());

        if(mp.isPlaying())
        {
            runnable = new Runnable() {
                @Override
                public void run() {
                    playCycle();
                }
                };
            myHandler.postDelayed(runnable,1000);
        }
    }


    public void mediaMonitor()
    {
        timepos.setText(String.format("%d min, %d sec",
                TimeUnit.MILLISECONDS.toMinutes((long) mp.getCurrentPosition()),
                TimeUnit.MILLISECONDS.toSeconds((long) mp.getCurrentPosition()) -
                        TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes((long)
                                mp.getCurrentPosition()))));

        timedur.setText(String.format("%d min, %d sec",
                TimeUnit.MILLISECONDS.toMinutes((long) mp.getDuration()),
                TimeUnit.MILLISECONDS.toSeconds((long) mp.getDuration()) -
                        TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes((long)
                                mp.getDuration()))));
        seekBar.setProgress((int)mp.getCurrentPosition());
        myHandler.postDelayed(UpdateVideoTime,1000);
    }

    @Override
    protected void onPause(){
        super.onPause();

        if(null != mp) mp.release();
        mp = null;
    }
}

